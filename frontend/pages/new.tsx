import type { NextPage } from "next";
import { useState } from "react";
import Head from "next/head";
import Calendar from "react-calendar";
// import 'react-calendar/dist/Calendar.css';
import { useRouter } from "next/router";

const New: NextPage = () => {

  const router = useRouter()
  const [title, setTitle] = useState("");
  const [location, setLoc] = useState("");
  const [description, setDescription] = useState("");
  const [date, setDate] = useState(new Date());
  const [creator, setCreator] = useState("");
  const [loading, setLoading] = useState(false);

  async function getFunc() {
    var poll = await fetch("http://localhost:3000/polls", {
      method: "POST", // *GET, POST, PUT, DELETE, etc.
      mode: "cors", // no-cors, *cors, same-origin
      cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
      credentials: "same-origin", // include, *same-origin, omit
      headers: {
        "Content-Type": "application/json",
        // 'Content-Type': 'application/x-www-form-urlencoded',
      },
      redirect: "follow", // manual, *follow, error
      referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
      body: JSON.stringify({
        title: title,
        description: description,
        date: date.toString(),
        location: location,
        creator: creator,
      }),
    })
      .then((res) => res.json())
      .then((response) => {
        return response;
      })
      .then((res) => {
        return res;
      });

    return poll;
  }

  async function submitHandler() {
    setLoading(true);

    var poll = await getFunc();
    console.log("Created one at: ", poll);
    
    router.push('/polls/' + poll.id)

    setLoading(false);
  }

  return (
    <div className="">
      <Head>
        <title>Create a Poll</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="p-20 bg-fourth">
        <h1 className="text-black text-7xl font-semibold">
          Let's create a{" "}
          <span className="px-4 py-2 bg-primary text-white rounded-xl">
            poll!
          </span>
        </h1>

        <div
          id="input"
          className="outline outline-1 outline-gray-400 rounded-xl py-10 mt-10 text-lg text-gray-600 grid gap-4 place-content-center bg-chalk"
        >
          <h1 className="text-4xl px-10 font-bold">Create a new event!</h1>

          <div className="flex flex-wrap gap-20 p-10">
            <div className="flex-1 grid gap-2">
              <div className="grid w-full">
                <h1 className="font-semibold">Name</h1>
                <input
                  onChange={(e) => {
                    setCreator(e.target.value);
                  }}
                  value={creator}
                  placeholder="John Doe"
                  className="outline outline-1 outline-gray-400 bg-chalk text-lg rounded-xl p-1"
                ></input>
              </div>
              <div className="grid  w-full">
                <h1 className="font-semibold">Title</h1>
                <input
                  onChange={(e) => {
                    setTitle(e.target.value);
                  }}
                  value={title}
                  placeholder="Work event xyz..."
                  className="outline outline-1 outline-gray-400 bg-chalk text-lg rounded-xl p-1"
                ></input>
              </div>
              <div className="grid  w-full">
                <h1 className="font-semibold">Location</h1>
                <input
                  onChange={(e) => {
                    setLoc(e.target.value);
                  }}
                  value={location}
                  placeholder="Jackbar's Shack"
                  className="outline outline-1 outline-gray-400 bg-chalk text-lg rounded-xl p-1"
                ></input>
              </div>

              <div className="grid w-full">
                <h1 className="font-semibold">Description</h1>
                <textarea
                  onChange={(e) => {
                    setDescription(e.target.value);
                  }}
                  value={description}
                  rows={3}
                  placeholder="Sau's birthday party! Come join us, its BYOB! Add more details ..."
                  className="outline outline-1 outline-gray-400 bg-chalk text-lg rounded-xl p-1"
                ></textarea>
              </div>
            </div>

            <div className="flex-1 my-auto mx-auto">
              <p className="font-semibold text-2xl text-center p-2">Pick a date!</p>
              <Calendar
                // showNeighboringMonth={true}
                // view="month"
                tileClassName="outline outline-1 rounded-full p-1 m-1 grid place-content-center"
                value={date}
                onChange={setDate}
                className="bg-secondary rounded-3xl p-6  text-white h-full place-content-center"
              />
              <p className="text-center py-2 text-2xl font-semibold">Selected Date: {date.toDateString()}</p>
            </div>
          </div>
          <div className="px-10">
            {!loading && (
              <button
                onClick={submitHandler}
                className="py-2 px-10 bg-secondary hover:bg-primary rounded-xl text-white font-medium w-full mt-4"
              >
                Submit
              </button>
            )}
            {loading && (
              <button
                disabled
                className="py-2 px-10 bg-secondary hover:bg-primary rounded-xl text-white font-medium w-full mt-4"
              >
                Loading...
              </button>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default New;
